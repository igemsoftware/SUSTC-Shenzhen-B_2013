using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;


namespace WebApplication3
{
    public class Algorithm2
    {
        private static int[,] loopsizdedata = new int[3, 30];
        private static int[, , ,] stackdata = new int[4, 4, 4, 4];
        private static int[, , ,] tstack_H_data = new int[4, 4, 4, 4];
        private static int[, , ,] tstack_I_data = new int[4, 4, 4, 4];
        private static string[] triloop_data = new string[16];
        private static string[] tetraloop_data = new string[78];
        private static double[, , , ,] interior_1x2_data = new double[6, 6, 4, 4, 4];
        private static double[, , ,] interior_2x2_data = new double[6, 6, 16, 16];
        private static string atail;
        private static string stemLoop;
        private static string spacer;
        private static string ttail;
        private static char[] stemLoopchar_array;
        private static int[] stemloop_array;
        public static double freeEnergy;
        public static double nt;
        public static double dscore;
        public static double terminatorefficiency;
        private static int maxIsize = 15;
        private static int maxHsize = 15;
        private static int[,] G_matrix;
        private static string[,] GBI_Next_Pair;
        private static int[] Secondary_Structure;
        public static string Structure;
        public static string Full_Structure;

        //change A C G T(U) into 0,1,2,3.
        //change squence into interger sequence which make getting the thermaldynamic parameters easier
        private static void setStemLoopArray()
        {
            stemLoopchar_array = stemLoop.ToCharArray();
            stemloop_array = new int[stemLoop.Length];
            for (int i = 0; i < stemLoop.Length; i++)
            {
                if (stemLoopchar_array[i] == 'A')
                    stemloop_array[i] = 0;
                if (stemLoopchar_array[i] == 'C')
                    stemloop_array[i] = 1;
                if (stemLoopchar_array[i] == 'G')
                    stemloop_array[i] = 2;
                if (stemLoopchar_array[i] == 'T' || stemloop_array[i] == 'U')
                    stemloop_array[i] = 3;

            }

        }
        public static void setStackData()
        {
            string[] s = new string[18];
            int p=0;
            s[1] = "999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 -09";
            s[2] = "999 999 999 999 999 999 999 999 999 999 999 999 999 999 -21 999";
            s[3] = "999 999 999 999 999 999 999 999 999 999 999 999 999 -17 999 -05";
            s[4] = "999 999 999 999 999 999 999 999 999 999 999 999 -09 999 -10 999";
            s[5] = "999 999 999 999 999 999 999 999 999 999 999 -18 999 999 999 999";
            s[6] = "999 999 999 999 999 999 999 999 999 999 -29 999 999 999 999 999";
            s[7] = "999 999 999 999 999 999 999 999 999 -20 999 -12 999 999 999 999";
            s[8] = "999 999 999 999 999 999 999 999 -17 999 -19 999 999 999 999 999";
            s[9] = "999 999 999 999 999 999 999 -23 999 999 999 999 999 999 999 -11";
            s[10] = "999 999 999 999 999 999 -34 999 999 999 999 999 999 999 -21 999";
            s[11] = "999 999 999 999 999 -29 999 -14 999 999 999 999 999 -19 999 -04";
            s[12] = "999 999 999 999 -21 999 -21 999 999 999 999 999 -10 999 +15 999";
            s[13] = "999 999 999 -11 999 999 999 999 999 999 999 -08 999 999 999 999";
            s[14] = "999 999 -23 999 999 999 999 999 999 999 -14 999 999 999 999 999";
            s[15] = "999 -18 999 -08 999 999 999 999 999 -12 999 -02 999 999 999 999";
            s[16] = "-09 999 -11 999 999 999 999 999 -05 999 -04 999 999 999 999 999";
            string line_string;
            for (int i = 0; i < 4; i++)
            {
                for (int k = 0; k < 4; k++)
                {
                    p++;
                    line_string = s[p];
                    for (int j = 0; j < 4; j++)
                    {
                        string sub_line = line_string.Substring(16 * j, 15);
                        for (int l = 0; l < 4; l++)
                        {
                            string stack_string = sub_line.Substring(4 * l, 3);
                            stackdata[i, j, k, l] = Convert.ToInt32(stack_string);
                        }

                    }
                }
            }
        }

        // set the thermaldynamic parameters
        public static void setTStackHData()
        {
            string[] s = new string[18];
            int p = 0;
            s[1] = "999 999 999 999 999 999 999 999 999 999 999 999 -08 -10 -17 -10";
            s[2] = "999 999 999 999 999 999 999 999 999 999 999 999 -07 -07 -07 -07 ";
            s[3] = "999 999 999 999 999 999 999 999 999 999 999 999 -15 -10 -10 -10";
            s[4] = "999 999 999 999 999 999 999 999 999 999 999 999 -08 -08 -08 -08";
            s[5] = "999 999 999 999 999 999 999 999 -14 -20 -21 -19 999 999 999 999";
            s[6] = "999 999 999 999 999 999 999 999 -10 -11 -10 -08 999 999 999 999";
            s[7] = "999 999 999 999 999 999 999 999 -21 -19 -14 -19 999 999 999 999";
            s[8] = "999 999 999 999 999 999 999 999 -14 -15 -14 -12 999 999 999 999";
            s[9] = "999 999 999 999 -11 -13 -20 -13 999 999 999 999 -08 -10 -17 -10";
            s[10] = "999 999 999 999 -11 -06 -06 -05 999 999 999 999 -07 -07 -07 -07";
            s[11] = "999 999 999 999 -23 -15 -14 -15 999 999 999 999 -15 -10 -10 -10";
            s[12] = "999 999 999 999 -08 -08 -08 -07 999 999 999 999 -08 -08 -08 -08";
            s[13] = "-10 -08  -18 -9 999 999 999 -12 -14 -20 -14 999 999 999 999 999";
            s[14] = "-07 -06 -03 -05 999 999 999 999 -09 -09 -07 -07 999 999 999 999";
            s[15] = "-18 -09 -12 -09 999 999 999 999 -20 -14 -13 -14 999 999 999 999";
            s[16] = "-03 -06 -03 -05 999 999 999 999 -09 -11 -09 -09 999 999 999 999";
            string line_string;
            for (int i = 0; i < 4; i++)
            {
                for (int k = 0; k < 4; k++)
                {
                    p++;
                    line_string = s[p];
                    for (int j = 0; j < 4; j++)
                    {
                        string sub_line = line_string.Substring(16 * j, 15);
                        for (int l = 0; l < 4; l++)
                        {
                            string tstackH_string = sub_line.Substring(4 * l, 3);
                            tstack_H_data[i, j, k, l] = Convert.ToInt32(tstackH_string);
                        }

                    }
                }
            }
        }
        public static void setTStackIData()
        {
            string[] s = new string[18];
            int p = 0;
            s[1] = "999 999 999 999 999 999 999 999 999 999 999 999 -10 -10 -22 -05";
            s[2] = "999 999 999 999 999 999 999 999 999 999 999 999 -10 -10 -02 -10";
            s[3] = "999 999 999 999 999 999 999 999 999 999 999 999 -22 -05 -10 -05";
            s[4] = "999 999 999 999 999 999 999 999 999 999 999 999 -03 -10 -03 -20";
            s[5] = "999 999 999 999 999 999 999 999 -15 -15 -27 -19 999 999 999 999";
            s[6] = "999 999 999 999 999 999 999 999 -15 -15 -10 -15 999 999 999 999";
            s[7] = "999 999 999 999 999 999 999 999 -27 -19 -15 -19 999 999 999 999 ";
            s[8] = "999 999 999 999 999 999 999 999 -14 -15 -14 -25 999 999 999 999";
            s[9] = "999 999 999 999 -15 -15 -27 -13 999 999 999 999 -15 -15 -27 -13";
            s[10] = "999 999 999 999 -15 -15 -06 -15 999 999 999 999 -15 -15 -06 -15";
            s[11] = "999 999 999 999 -27 -15 -15 -15 999 999 999 999 -27 -15 -15 -15";
            s[12] = "999 999 999 999 -08 -15 -08 -25 999 999 999 999 -08 -15 -08 -25";
            s[13] = "-10 -10 -22 -04 999 999 999 999 -10 -10 -22 -04 999 999 999 999";
            s[14] = "-10 -10 002 -10 999 999 999 999 -10 -10 002 -10 999 999 999 999";
            s[15] = "-22 -04 -10 -04 999 999 999 999 -22 -04 -10 -04 999 999 999 999";
            s[16] = "002 -10 002 -20 999 999 999 999 002 -10 002 -20 999 999 999 999";
            string line_string;
            for (int i = 0; i < 4; i++)
            {
                for (int k = 0; k < 4; k++)
                {
                    p++;
                    line_string = s[p];
                    for (int j = 0; j < 4; j++)
                    {
                        string sub_line = line_string.Substring(16 * j, 15);
                        for (int l = 0; l < 4; l++)
                        {
                            string tstackI_string = sub_line.Substring(4 * l, 3);
                            tstack_I_data[i, j, k, l] = Convert.ToInt32(tstackI_string);
                        }

                    }
                }
            }
        }
        public static void setLoopSizeData()
        {
            int p=0;
            string[] s = new string[32];
            s[1] = "999 039 999";
            s[2] = "041 031 999";
            s[3] = "051 035 041";
            s[4] = "049 042 049";
            s[5] = "053 048 044";
            s[6] = "057 050 047";
            s[7] = "059 052 050";
            s[8] = "060 053 051";
            s[9] = "061 054 052";
            s[10] = "063 055 053";
            s[11] = "064 057 054";
            s[12] = "064 057 055";
            s[13] = "065 058 056";
            s[14] = "066 059 057";
            s[15] = "067 060 058";
            s[16] = "068 061 058";
            s[17] = "068 061 059";
            s[18] = "069 062 059";
            s[19] = "069 062 060";
            s[20] = "070 063 061";
            s[21] = "071 063 061";
            s[22] = "071 064 062";
            s[23] = "071 064 062";
            s[24] = "072 065 063";
            s[25] = "072 065 063";
            s[26] = "073 065 063";
            s[27] = "073 066 064";
            s[28] = "074 067 064";
            s[29] = "074 067 065";
            s[30] = "074 067 065";
                        string line_string;
            for (int j = 0; j < 30; j++)
            {
                p++;
                line_string = s[p];
                for (int i = 0; i < 3; i++)
                {
                    string loopsizedata_string = line_string.Substring(4 * i, 3);
                    loopsizdedata[2 - i, j] = Convert.ToInt32(loopsizedata_string);
                }
            }
        }
        
        public static void setTriloopData()
        {
            int p = 0;
            string[] s = new string[18];
            s[1] = " AGAAT   -1.0";
            s[2] = " AGCAT   -1.0";
            s[3] = " AGGAT   -1.0";
            s[4] = " AGTAT   -1.0";
            s[5] = " CGAAG   -2.0";
            s[6] = " CGCAG   -2.0";
            s[7] = " CGGAG   -2.0";
            s[8] = " CGTAG   -2.0";
            s[9] = " GGAAC   -2.0";
            s[10] = " GGCAC   -2.0";
            s[11] = " GGGAC   -2.0";
            s[12] = " GGTAC   -2.0";
            s[13] = " TGAAA   -1.0";
            s[14] = " TGCAA   -1.0";
            s[15] = " TGGAA   -1.0";
            s[16] = " TGTAA   -1.0";

            for (int i = 0; i < 16; i++)
            {
                p++;
                triloop_data[i] = s[p];
            }
        }
        public static void setTetraloopData()
        {
            int p = 0;
            string[] s = new string[80];
            s[1] = "AGAAAT -20";
            s[2] = "AGCAAT -20";
            s[3] = "AGAGAT -20";
            s[4] = "AGTGAT -20";
            s[5] = "AGGAAT -20";
            s[6] = "ATTCGT -20";
            s[7] = "ATACGT -20";
            s[8] = "AGCGAT -20";
            s[9] = "ATCCGT -20";
            s[10] = "AGTAAT -20";
            s[11] = "ACTTGT -20";
            s[12] = "AATTTT -20";
            s[13] = "ATTTAT -20";
            s[14] = "CGAAAG -20";
            s[15] = "CGCAAG -20";
            s[16] = "CGAGAG -20";
            s[17] = "CGTGAG -20";
            s[18] = "CGGAAG -20";
            s[19] = "CTTCGG -20";
            s[20] = "CTACGG -20";
            s[21] = "CGCGAG -20";
            s[22] = "CTCCGG -20";
            s[23] = "CGTAAG -20";
            s[24] = "CCTTGG -20";
            s[25] = "CATTTG -20";
            s[26] = "CTTTAG -20";
            s[27] = "GGAAAC -20";
            s[28] = "GGCAAC -20";
            s[29] = "GGAGAC -20";
            s[30] = "GGTGAC -20";
            s[31] = "GGGAAC -20";
            s[32] = "GTTCGC -20";
            s[33] = "GTACGC -20";
            s[34] = "GGCGAC -20";
            s[35] = "GTCCGC -20";
            s[36] = "GGTAAC -20";
            s[37] = "GCTTGC -20";
            s[38] = "GATTTC -20";
            s[39] = "GTTTAC -20";
            s[40] = "TGAAAA -20";
            s[41] = "TGCAAA -20";
            s[42] = "TGAGAA -20";
            s[43] = "TGTGAA -20";
            s[44] = "TGGAAA -20";
            s[45] = "TTTCGA -20";
            s[46] = "TTACGA -20";
            s[47] = "TGCGAA -20";
            s[48] = "TTCCGA -20";
            s[49] = "TGTAAA -20";
            s[50] = "TCTTGA -20";
            s[51] = "TATTTA -20";
            s[52] = "TTTTAA -20";
            s[53] = "GGAAAT -20";
            s[54] = "GGCAAT -20";
            s[55] = "GGAGAT -20";
            s[56] = "GGTGAT -20";
            s[57] = "GGGAAT -20";
            s[58] = "GTTCGT -20";
            s[59] = "GTACGT -20";
            s[60] = "GGCGAT -20";
            s[61] = "GTCCGT -20";
            s[62] = "GGTAAT -20";
            s[63] = "GCTTGT -20";
            s[64] = "GATTTT -20";
            s[65] = "GTTTAT -20";
            s[66] = "TGAAAG -20";
            s[67] = "TGCAAG -20";
            s[68] = "TGAGAG -20";
            s[69] = "TGTGAG -20";
            s[70] = "TGGAAG -20";
            s[71] = "TTTCGG -20";
            s[72] = "TTACGG -20";
            s[73] = "TGCGAG -20";
            s[74] = "TTCCGG -20";
            s[75] = "TGTAAG -20";
            s[76] = "TCTTGG -20";
            s[77] = "TATTTG -20";
            s[78] = "TTTTAG -20";
            for (int i = 0; i < 78; i++)
            {
                p++;
                tetraloop_data[i] = s[p];
            }
  }

        public static void setInterior2x2Data()
        {
            int p = 0;
            string[] s = new string[600];
            s[1] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[2] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[3] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[4] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[5] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[6] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[7] = "  3.70  3.70  2.50  4.90  3.70  3.70  4.30  3.70  2.50  4.90  3.70  4.90  4.30  3.70  4.30  2.70 ";
            s[8] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[9] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[10] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[11] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[12] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[13] = "  3.60  3.60  2.40  4.80  3.60  3.60  4.20  3.60  2.40  4.80  3.60  4.80  4.20  3.60  4.20  2.60 ";
            s[14] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[15] = "  3.60  3.60  2.40  4.80  3.60  3.60  4.20  3.60  2.40  4.80  3.60  4.80  4.20  3.60  4.20  2.60 ";
            s[16] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[17] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[18] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[19] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[20] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[21] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[22] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[23] = "  3.20  3.20  2.00  3.90  3.20  3.20  3.20  3.20  2.00  4.10  3.20  3.90  3.40  3.20  3.20  2.20 ";
            s[24] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[25] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[26] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[27] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[28] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[29] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.10  3.10  1.90  4.00  3.10  3.80  3.30  3.10  3.10  2.10 ";
            s[30] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[31] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.10  3.10  1.90  4.00  3.10  3.80  3.30  3.10  3.10  2.10 ";
            s[32] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            s[33] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[34] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[35] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[36] = "  2.90  2.90  1.70  3.00  2.90  2.90  2.50  2.90  1.70  3.40  2.90  3.00  2.50  2.90  2.50  1.90 ";
            s[37] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[38] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[39] = "  3.20  3.20  2.00  3.30  3.20  3.20  2.80  3.20  2.00  3.70  3.20  3.30  2.80  3.20  2.80  2.20 ";
            s[40] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[41] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[42] = "  2.90  2.90  1.70  3.00  2.90  2.90  2.50  2.90  1.70  3.40  2.90  3.00  2.50  2.90  2.50  1.90 ";
            s[43] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[44] = "  2.90  2.90  1.70  3.00  2.90  2.90  2.50  2.90  1.70  3.40  2.90  3.00  2.50  2.90  2.50  1.90 ";
            s[45] = "  3.10  3.10  1.90  3.20  3.10  3.10  2.70  3.10  1.90  3.60  3.10  3.20  2.70  3.10  2.70  2.10 ";
            s[46] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[47] = "  3.10  3.10  1.90  3.20  3.10  3.10  2.70  3.10  1.90  3.60  3.10  3.20  2.70  3.10  2.70  2.10 ";
            s[48] = "  1.40  1.40  0.20  1.50  1.40  1.40  1.00  1.40  0.20  1.90  1.40  1.50  1.00  1.40  1.00  0.40 ";
            s[49] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[50] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[51] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[52] = "  3.40  3.40  2.20  4.10  3.40  3.40  3.90  3.40  2.20  4.20  3.40  4.10  3.90  3.40  3.90  2.40 ";
            s[53] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[54] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[55] = "  3.70  3.70  2.50  4.40  3.70  3.70  4.20  3.70  2.50  4.50  3.70  4.40  4.20  3.70  4.20  2.70 ";
            s[56] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[57] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[58] = "  3.40  3.40  2.20  4.10  3.40  3.40  3.90  3.40  2.20  4.20  3.40  4.10  3.90  3.40  3.90  2.40 ";
            s[59] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[60] = "  3.40  3.40  2.20  4.10  3.40  3.40  3.90  3.40  2.20  4.20  3.40  4.10  3.90  3.40  3.90  2.40 ";
            s[61] = "  3.60  3.60  2.40  4.30  3.60  3.60  4.10  3.60  2.40  4.40  3.60  4.30  4.10  3.60  4.10  2.60 ";
            s[62] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[63] = "  3.60  3.60  2.40  4.30  3.60  3.60  4.10  3.60  2.40  4.40  3.60  4.30  4.10  3.60  4.10  2.60 ";
            s[64] = "  1.90  1.90  0.70  2.60  1.90  1.90  2.40  1.90  0.70  2.70  1.90  2.60  2.40  1.90  2.40  0.90 ";
            s[65] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[66] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[67] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[68] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[69] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[70] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[71] = "  3.70  3.70  2.50  4.90  3.70  3.70  4.30  3.70  2.50  4.90  3.70  4.90  4.30  3.70  4.30  2.70 ";
            s[72] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[73] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[74] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[75] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[76] = "  3.40  3.40  2.20  4.60  3.40  3.40  4.00  3.40  2.20  4.60  3.40  4.60  4.00  3.40  4.00  2.40 ";
            s[77] = "  3.60  3.60  2.40  4.80  3.60  3.60  4.20  3.60  2.40  4.80  3.60  4.80  4.20  3.60  4.20  2.60 ";
            s[78] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[79] = "  3.60  3.60  2.40  4.80  3.60  3.60  4.20  3.60  2.40  4.80  3.60  4.80  4.20  3.60  4.20  2.60 ";
            s[80] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[81] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[82] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[83] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[84] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[85] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[86] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[87] = "  3.20  3.20  2.00  3.90  3.20  3.20  3.20  3.20  2.00  4.10  3.20  3.90  3.40  3.20  3.20  2.20 ";
            s[88] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[89] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[90] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[91] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[92] = "  2.90  2.90  1.70  3.60  2.90  2.90  2.90  2.90  1.70  3.80  2.90  3.60  3.10  2.90  2.90  1.90 ";
            s[93] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.10  3.10  1.90  4.00  3.10  3.80  3.30  3.10  3.10  2.10 ";
            s[94] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[95] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.10  3.10  1.90  4.00  3.10  3.80  3.30  3.10  3.10  2.10 ";
            s[96] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            s[97] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[98] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[99] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[100] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[101] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[102] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[103] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[104] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[105] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[106] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[107] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[108] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[109] = "  2.50  2.50  1.30  3.70  2.50  2.50  3.10  2.50  1.30  3.70  2.50  3.70  3.10  2.50  3.10  1.50 ";
            s[110] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[111] = "  2.50  2.50  1.30  3.70  2.50  2.50  3.10  2.50  1.30  3.70  2.50  3.70  3.10  2.50  3.10  1.50 ";
            s[112] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";                            
            s[113] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[114] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[115] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[116] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[117] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[118] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[119] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[120] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[121] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[122] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[123] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[124] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[125] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.00  2.00  0.80  2.90  2.00  2.70  2.20  2.00  2.00  1.00 ";
            s[126] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[127] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.00  2.00  0.80  2.90  2.00  2.70  2.20  2.00  2.00  1.00 ";
            s[128] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[129] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[130] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[131] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[132] = "  1.50  1.50  0.30  1.60  1.50  1.50  1.10  1.50  0.30  2.00  1.50  1.60  1.10  1.50  1.10  0.50 ";
            s[133] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[134] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[135] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[136] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[137] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[138] = "  1.50  1.50  0.30  1.60  1.50  1.50  1.10  1.50  0.30  2.00  1.50  1.60  1.10  1.50  1.10  0.50 ";
            s[139] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[140] = "  1.50  1.50  0.30  1.60  1.50  1.50  1.10  1.50  0.30  2.00  1.50  1.60  1.10  1.50  1.10  0.50 ";
            s[141] = "  2.00  2.00  0.80  2.10  2.00  2.00  1.60  2.00  0.80  2.50  2.00  2.10  1.60  2.00  1.60  1.00 ";
            s[142] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[143] = "  2.00  2.00  0.80  2.10  2.00  2.00  1.60  2.00  0.80  2.50  2.00  2.10  1.60  2.00  1.60  1.00 ";
            s[144] = "  0.90  0.90 -0.30  1.00  0.90  0.90  0.50  0.90 -0.30  1.40  0.90  1.00  0.50  0.90  0.50 -0.10 ";
            s[145] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[146] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[147] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[148] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.50  2.00  0.80  2.80  2.00  2.70  2.50  2.00  2.50  1.00 ";
            s[149] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[150] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[151] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[152] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[153] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[154] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.50  2.00  0.80  2.80  2.00  2.70  2.50  2.00  2.50  1.00 ";
            s[155] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[156] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.50  2.00  0.80  2.80  2.00  2.70  2.50  2.00  2.50  1.00 ";
            s[157] = "  2.50  2.50  1.30  3.20  2.50  2.50  3.00  2.50  1.30  3.30  2.50  3.20  3.00  2.50  3.00  1.50 ";
            s[158] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[159] = "  2.50  2.50  1.30  3.20  2.50  2.50  3.00  2.50  1.30  3.30  2.50  3.20  3.00  2.50  3.00  1.50 ";
            s[160] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.90  1.40  0.20  2.20  1.40  2.10  1.90  1.40  1.90  0.40 ";
            s[161] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[162] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[163] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[164] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[165] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[166] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[167] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[168] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[169] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[170] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[171] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[172] = "  2.00  2.00  0.80  3.20  2.00  2.00  2.60  2.00  0.80  3.20  2.00  3.20  2.60  2.00  2.60  1.00 ";
            s[173] = "  2.50  2.50  1.30  3.70  2.50  2.50  3.10  2.50  1.30  3.70  2.50  3.70  3.10  2.50  3.10  1.50 ";
            s[174] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[175] = "  2.50  2.50  1.30  3.70  2.50  2.50  3.10  2.50  1.30  3.70  2.50  3.70  3.10  2.50  3.10  1.50 ";
            s[176] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";
            s[177] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[178] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[179] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[180] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[181] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[182] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[183] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[184] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[185] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[186] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[187] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[188] = "  1.50  1.50  0.30  2.20  1.50  1.50  1.50  1.50  0.30  2.40  1.50  2.20  1.70  1.50  1.50  0.50 ";
            s[189] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.00  2.00  0.80  2.90  2.00  2.70  2.20  2.00  2.00  1.00 ";
            s[190] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[191] = "  2.00  2.00  0.80  2.70  2.00  2.00  2.00  2.00  0.80  2.90  2.00  2.70  2.20  2.00  2.00  1.00 ";
            s[192] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[193] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[194] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[195] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[196] = "  2.60  2.60  1.40  3.80  2.60  2.60  3.20  2.60  1.40  3.80  2.60  3.80  3.20  2.60  3.20  1.60 ";
            s[197] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[198] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[199] = "  3.30  3.30  2.10  4.50  3.30  3.30  3.90  3.30  2.10  4.50  3.30  4.50  3.90  3.30  3.90  2.30 ";
            s[200] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[201] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[202] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[203] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[204] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[205] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[206] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[207] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[208] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";
            s[209] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[210] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[211] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[212] = "  2.10  2.10  0.90  2.80  2.10  2.10  2.10  2.10  0.90  3.00  2.10  2.80  2.30  2.10  2.10  1.10 ";
            s[213] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[214] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[215] = "  2.80  2.80  1.60  3.50  2.80  2.80  2.80  2.80  1.60  3.70  2.80  3.50  3.00  2.80  2.80  1.80 ";
            s[216] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[217] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[218] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[219] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[220] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[221] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[222] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[223] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[224] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[225] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[226] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[227] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[228] = "  2.10  2.10  0.90  2.20  2.10  2.10  1.70  2.10  0.90  2.60  2.10  2.20  1.70  2.10  1.70  1.10 ";
            s[229] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[230] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[231] = "  2.80  2.80  1.60  2.90  2.80  2.80  2.40  2.80  1.60  3.30  2.80  2.90  2.40  2.80  2.40  1.80 ";
            s[232] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[233] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[234] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[235] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[236] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[237] = "  2.60  2.60  1.40  2.70  2.60  2.60  2.20  2.60  1.40  3.10  2.60  2.70  2.20  2.60  2.20  1.60 ";
            s[238] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[239] = "  2.60  2.60  1.40  2.70  2.60  2.60  2.20  2.60  1.40  3.10  2.60  2.70  2.20  2.60  2.20  1.60 ";
            s[240] = "  0.90  0.90 -0.30  1.00  0.90  0.90  0.50  0.90 -0.30  1.40  0.90  1.00  0.50  0.90  0.50 -0.10 ";
            s[241] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[242] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[243] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[244] = "  2.60  2.60  1.40  3.30  2.60  2.60  3.10  2.60  1.40  3.40  2.60  3.30  3.10  2.60  3.10  1.60 ";
            s[245] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[246] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[247] = "  3.30  3.30  2.10  4.00  3.30  3.30  3.80  3.30  2.10  4.10  3.30  4.00  3.80  3.30  3.80  2.30 ";
            s[248] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[249] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[250] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[251] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[252] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[253] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.60  3.10  1.90  3.90  3.10  3.80  3.60  3.10  3.60  2.10 ";
            s[254] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[255] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.60  3.10  1.90  3.90  3.10  3.80  3.60  3.10  3.60  2.10 ";
            s[256] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.90  1.40  0.20  2.20  1.40  2.10  1.90  1.40  1.90  0.40 ";
            s[257] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[258] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[259] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[260] = "  2.60  2.60  1.40  3.80  2.60  2.60  3.20  2.60  1.40  3.80  2.60  3.80  3.20  2.60  3.20  1.60 ";
            s[261] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[262] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[263] = "  3.30  3.30  2.10  4.50  3.30  3.30  3.90  3.30  2.10  4.50  3.30  4.50  3.90  3.30  3.90  2.30 ";
            s[264] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[265] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[266] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[267] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[268] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[269] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[270] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[271] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[272] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";
            s[273] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[274] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[275] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[276] = "  2.10  2.10  0.90  2.80  2.10  2.10  2.10  2.10  0.90  3.00  2.10  2.80  2.30  2.10  2.10  1.10 ";
            s[277] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[278] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[279] = "  2.80  2.80  1.60  3.50  2.80  2.80  2.80  2.80  1.60  3.70  2.80  3.50  3.00  2.80  2.80  1.80 ";
            s[280] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[281] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[282] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[283] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[284] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[285] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[286] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[287] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[288] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[289] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[290] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[291] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[292] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[293] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[294] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[295] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[296] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[297] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[298] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[299] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[300] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[301] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[302] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[303] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[304] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[305] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[306] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[307] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[308] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[309] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[310] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[311] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[312] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[313] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[314] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[315] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[316] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[317] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[318] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[319] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[320] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            s[321] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[322] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[323] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[324] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[325] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[326] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[327] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[328] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[329] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[330] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[331] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[332] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[333] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[334] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[335] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[336] = "  1.40  1.40  0.20  1.50  1.40  1.40  1.00  1.40  0.20  1.90  1.40  1.50  1.00  1.40  1.00  0.40 ";
            s[337] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[338] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[339] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[340] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[341] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[342] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[343] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[344] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[345] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[346] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[347] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[348] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[349] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[350] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[351] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[352] = "  1.90  1.90  0.70  2.60  1.90  1.90  2.40  1.90  0.70  2.70  1.90  2.60  2.40  1.90  2.40  0.90 ";
            s[353] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[354] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[355] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[356] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[357] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[358] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[359] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[360] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[361] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[362] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[363] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[364] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[365] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[366] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[367] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[368] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[369] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[370] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[371] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[372] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[373] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[374] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[375] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[376] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[377] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[378] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[379] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[380] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[381] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[382] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[383] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[384] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            s[385] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[386] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[387] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[388] = "  2.60  2.60  1.40  3.80  2.60  2.60  3.20  2.60  1.40  3.80  2.60  3.80  3.20  2.60  3.20  1.60 ";
            s[389] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[390] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[391] = "  3.30  3.30  2.10  4.50  3.30  3.30  3.90  3.30  2.10  4.50  3.30  4.50  3.90  3.30  3.90  2.30 ";
            s[392] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[393] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[394] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[395] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[396] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[397] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[398] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[399] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[400] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";
            s[401] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[402] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[403] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[404] = "  2.10  2.10  0.90  2.80  2.10  2.10  2.10  2.10  0.90  3.00  2.10  2.80  2.30  2.10  2.10  1.10 ";
            s[405] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[406] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[407] = "  2.80  2.80  1.60  3.50  2.80  2.80  2.80  2.80  1.60  3.70  2.80  3.50  3.00  2.80  2.80  1.80 ";
            s[408] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[409] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[410] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[411] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[412] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[413] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[414] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[415] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[416] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[417] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[418] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[419] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[420] = "  2.10  2.10  0.90  2.20  2.10  2.10  1.70  2.10  0.90  2.60  2.10  2.20  1.70  2.10  1.70  1.10 ";
            s[421] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[422] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[423] = "  2.80  2.80  1.60  2.90  2.80  2.80  2.40  2.80  1.60  3.30  2.80  2.90  2.40  2.80  2.40  1.80 ";
            s[424] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[425] = "  0.70  0.70 -0.50  0.80  0.70  0.70  0.30  0.70 -0.50  1.20  0.70  0.80  0.30  0.70  0.30 -0.30 ";
            s[426] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[427] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[428] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[429] = "  2.60  2.60  1.40  2.70  2.60  2.60  2.20  2.60  1.40  3.10  2.60  2.70  2.20  2.60  2.20  1.60 ";
            s[430] = "  1.90  1.90  0.70  2.00  1.90  1.90  1.50  1.90  0.70  2.40  1.90  2.00  1.50  1.90  1.50  0.90 ";
            s[431] = "  2.60  2.60  1.40  2.70  2.60  2.60  2.20  2.60  1.40  3.10  2.60  2.70  2.20  2.60  2.20  1.60 ";
            s[432] = "  0.90  0.90 -0.30  1.00  0.90  0.90  0.50  0.90 -0.30  1.40  0.90  1.00  0.50  0.90  0.50 -0.10 ";
            s[433] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[434] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[435] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[436] = "  2.60  2.60  1.40  3.30  2.60  2.60  3.10  2.60  1.40  3.40  2.60  3.30  3.10  2.60  3.10  1.60 ";
            s[437] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[438] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[439] = "  3.30  3.30  2.10  4.00  3.30  3.30  3.80  3.30  2.10  4.10  3.30  4.00  3.80  3.30  3.80  2.30 ";
            s[440] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[441] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.70  1.20  0.00  2.00  1.20  1.90  1.70  1.20  1.70  0.20 ";
            s[442] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[443] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[444] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[445] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.60  3.10  1.90  3.90  3.10  3.80  3.60  3.10  3.60  2.10 ";
            s[446] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.90  2.40  1.20  3.20  2.40  3.10  2.90  2.40  2.90  1.40 ";
            s[447] = "  3.10  3.10  1.90  3.80  3.10  3.10  3.60  3.10  1.90  3.90  3.10  3.80  3.60  3.10  3.60  2.10 ";
            s[448] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.90  1.40  0.20  2.20  1.40  2.10  1.90  1.40  1.90  0.40 ";
            s[449] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[450] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[451] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[452] = "  2.60  2.60  1.40  3.80  2.60  2.60  3.20  2.60  1.40  3.80  2.60  3.80  3.20  2.60  3.20  1.60 ";
            s[453] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[454] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[455] = "  3.30  3.30  2.10  4.50  3.30  3.30  3.90  3.30  2.10  4.50  3.30  4.50  3.90  3.30  3.90  2.30 ";
            s[456] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[457] = "  1.20  1.20  0.00  2.40  1.20  1.20  1.80  1.20  0.00  2.40  1.20  2.40  1.80  1.20  1.80  0.20 ";
            s[458] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[459] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[460] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[461] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[462] = "  2.40  2.40  1.20  3.60  2.40  2.40  3.00  2.40  1.20  3.60  2.40  3.60  3.00  2.40  3.00  1.40 ";
            s[463] = "  3.10  3.10  1.90  4.30  3.10  3.10  3.70  3.10  1.90  4.30  3.10  4.30  3.70  3.10  3.70  2.10 ";
            s[464] = "  1.40  1.40  0.20  2.60  1.40  1.40  2.00  1.40  0.20  2.60  1.40  2.60  2.00  1.40  2.00  0.40 ";
            s[465] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[466] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[467] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[468] = "  2.10  2.10  0.90  2.80  2.10  2.10  2.10  2.10  0.90  3.00  2.10  2.80  2.30  2.10  2.10  1.10 ";
            s[469] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[470] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[471] = "  2.80  2.80  1.60  3.50  2.80  2.80  2.80  2.80  1.60  3.70  2.80  3.50  3.00  2.80  2.80  1.80 ";
            s[472] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[473] = "  0.70  0.70 -0.50  1.40  0.70  0.70  0.70  0.70 -0.50  1.60  0.70  1.40  0.90  0.70  0.70 -0.30 ";
            s[474] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[475] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[476] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[477] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[478] = "  1.90  1.90  0.70  2.60  1.90  1.90  1.90  1.90  0.70  2.80  1.90  2.60  2.10  1.90  1.90  0.90 ";
            s[479] = "  2.60  2.60  1.40  3.30  2.60  2.60  2.60  2.60  1.40  3.50  2.60  3.30  2.80  2.60  2.60  1.60 ";
            s[480] = "  0.90  0.90 -0.30  1.60  0.90  0.90  0.90  0.90 -0.30  1.80  0.90  1.60  1.10  0.90  0.90 -0.10 ";
            s[481] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[482] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[483] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[484] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[485] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[486] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[487] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[488] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[489] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[490] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[491] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[492] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[493] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[494] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[495] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[496] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[497] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[498] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[499] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[500] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[501] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[502] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[503] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[504] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[505] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[506] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[507] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[508] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[509] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[510] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[511] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[512] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            s[513] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[514] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[515] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[516] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[517] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[518] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[519] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[520] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[521] = "  1.20  1.20  0.00  1.30  1.20  1.20  0.80  1.20  0.00  1.70  1.20  1.30  0.80  1.20  0.80  0.20 ";
            s[522] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[523] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[524] = "  3.00  3.00  1.80  3.10  3.00  3.00  2.60  3.00  1.80  3.50  3.00  3.10  2.60  3.00  2.60  2.00 ";
            s[525] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[526] = "  2.40  2.40  1.20  2.50  2.40  2.40  2.00  2.40  1.20  2.90  2.40  2.50  2.00  2.40  2.00  1.40 ";
            s[527] = "  3.60  3.60  2.40  3.70  3.60  3.60  3.20  3.60  2.40  4.10  3.60  3.70  3.20  3.60  3.20  2.60 ";
            s[528] = "  1.40  1.40  0.20  1.50  1.40  1.40  1.00  1.40  0.20  1.90  1.40  1.50  1.00  1.40  1.00  0.40 ";
            s[529] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[530] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[531] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[532] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[533] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[534] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[535] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[536] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[537] = "  1.70  1.70  0.50  2.40  1.70  1.70  2.20  1.70  0.50  2.50  1.70  2.40  2.20  1.70  2.20  0.70 ";
            s[538] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[539] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[540] = "  3.50  3.50  2.30  4.20  3.50  3.50  4.00  3.50  2.30  4.30  3.50  4.20  4.00  3.50  4.00  2.50 ";
            s[541] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[542] = "  2.90  2.90  1.70  3.60  2.90  2.90  3.40  2.90  1.70  3.70  2.90  3.60  3.40  2.90  3.40  1.90 ";
            s[543] = "  4.10  4.10  2.90  4.80  4.10  4.10  4.60  4.10  2.90  4.90  4.10  4.80  4.60  4.10  4.60  3.10 ";
            s[544] = "  1.90  1.90  0.70  2.60  1.90  1.90  2.40  1.90  0.70  2.70  1.90  2.60  2.40  1.90  2.40  0.90 ";
            s[545] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[546] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[547] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[548] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[549] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[550] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[551] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[552] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[553] = "  1.70  1.70  0.50  2.90  1.70  1.70  2.30  1.70  0.50  2.90  1.70  2.90  2.30  1.70  2.30  0.70 ";
            s[554] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[555] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[556] = "  3.50  3.50  2.30  4.70  3.50  3.50  4.10  3.50  2.30  4.70  3.50  4.70  4.10  3.50  4.10  2.50 ";
            s[557] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[558] = "  2.90  2.90  1.70  4.10  2.90  2.90  3.50  2.90  1.70  4.10  2.90  4.10  3.50  2.90  3.50  1.90 ";
            s[559] = "  4.10  4.10  2.90  5.30  4.10  4.10  4.70  4.10  2.90  5.30  4.10  5.30  4.70  4.10  4.70  3.10 ";
            s[560] = "  1.90  1.90  0.70  3.10  1.90  1.90  2.50  1.90  0.70  3.10  1.90  3.10  2.50  1.90  2.50  0.90 ";
            s[561] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[562] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[563] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[564] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[565] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[566] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[567] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[568] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[569] = "  1.20  1.20  0.00  1.90  1.20  1.20  1.20  1.20  0.00  2.10  1.20  1.90  1.40  1.20  1.20  0.20 ";
            s[570] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[571] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[572] = "  3.00  3.00  1.80  3.70  3.00  3.00  3.00  3.00  1.80  3.90  3.00  3.70  3.20  3.00  3.00  2.00 ";
            s[573] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[574] = "  2.40  2.40  1.20  3.10  2.40  2.40  2.40  2.40  1.20  3.30  2.40  3.10  2.60  2.40  2.40  1.40 ";
            s[575] = "  3.60  3.60  2.40  4.30  3.60  3.60  3.60  3.60  2.40  4.50  3.60  4.30  3.80  3.60  3.60  2.60 ";
            s[576] = "  1.40  1.40  0.20  2.10  1.40  1.40  1.40  1.40  0.20  2.30  1.40  2.10  1.60  1.40  1.40  0.40 ";
            string line_string;
            for (int a = 0; a < 6; a++)
            {
                for (int b = 0; b < 6; b++)
                {
                    for (int m = 0; m < 16; m++)
                    {
                        p++;
                        line_string = s[p];
                        for (int n = 0; n < 16; n++)
                        {
                            string interior2x2data_string = line_string.Substring(6 * n + 2, 4);
                            interior_2x2_data[a, b, m, n] = Convert.ToDouble(interior2x2data_string);
                        }
                    }
                }
            }
        }
        public static void setInterior_1x2_Data()
        {
            int p=0;
            string[] s = new string[100];
            s[1]="  3.40  3.40  2.20  3.90  2.90  2.90  1.70  3.40  2.90  2.90  1.70  3.40  3.40  3.40  2.20  3.90  3.40  3.40  2.20  3.90  2.90  2.90  1.70  3.40 ";
s[2]="  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90  2.90  2.90  3.70  2.90  3.40  3.40  4.20  3.40  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90 ";
s[3]="  1.00  2.70  2.20  2.70  0.50  2.20  1.70  2.20  0.50  2.20  1.70  2.20  1.00  2.70  2.20  2.70  1.00  2.70  2.20  2.70  0.50  2.20  1.70  2.20 ";
s[4]="  4.70  4.00  4.70  3.00  3.80  3.10  3.80  2.10  3.20  2.50  3.20  1.50  4.60  3.90  4.60  2.90  4.70  4.00  4.70  3.00  3.80  3.10  3.80  2.10 ";
s[5]="  3.40  3.40  2.20  3.90  2.90  2.90  1.70  3.40  2.90  2.90  1.70  3.40  3.40  3.40  2.20  3.90  3.40  3.40  2.20  3.90  2.90  2.90  1.70  3.40 ";
s[6]="  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90  2.90  2.90  3.70  2.90  3.40  3.40  4.20  3.40  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90 ";
s[7]="  3.40  5.10  4.60  5.10  2.60  4.30  3.80  4.30  2.20  3.90  3.40  3.90  3.00  4.70  4.20  4.70  3.40  5.10  4.60  5.10  2.60  4.30  3.80  4.30 ";
s[8]="  4.10  3.40  4.10  2.40  3.60  2.90  3.60  1.90  3.60  2.90  3.60  1.90  4.10  3.40  4.10  2.40  4.10  3.40  4.10  2.40  3.60  2.90  3.60  1.90 ";
s[9]="  2.20  2.20  1.00  2.70  1.70  1.70  0.50  2.20  1.70  1.70  0.50  2.20  2.20  2.20  1.00  2.70  2.20  2.20  1.00  2.70  1.70  1.70  0.50  2.20 ";
s[10]="  4.00  4.00  4.80  4.00  2.90  2.90  3.70  2.90  2.50  2.50  3.30  2.50  3.90  3.90  4.70  3.90  4.00  4.00  4.80  4.00  2.90  2.90  3.70  2.90 ";
s[11]="  2.20  3.90  3.40  3.90  1.70  3.40  2.90  3.40  1.70  3.40  2.90  3.40  2.20  3.90  3.40  3.90  2.20  3.90  3.40  3.90  1.70  3.40  2.90  3.40 ";
s[12]="  4.70  4.00  4.70  3.00  3.60  2.90  3.60  1.90  3.20  2.50  3.20  1.50  4.60  3.90  4.60  2.90  4.70  4.00  4.70  3.00  3.60  2.90  3.60  1.90 ";
s[13]="  4.60  4.60  3.40  5.10  3.60  3.60  2.40  4.10  3.00  3.00  1.80  3.50  4.10  4.10  2.90  4.60  4.60  4.60  3.40  5.10  3.60  3.60  2.40  4.10 ";
s[14]="  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90  2.90  2.90  3.70  2.90  3.40  3.40  4.20  3.40  3.40  3.40  4.20  3.40  2.90  2.90  3.70  2.90 ";
s[15]="  3.40  5.10  4.60  5.10  2.40  4.10  3.60  4.10  1.80  3.50  3.00  3.50  2.90  4.60  4.10  4.60  3.40  5.10  4.60  5.10  2.40  4.10  3.60  4.10 ";
s[16]="  3.10  2.40  3.10  1.40  2.60  1.90  2.60  0.90  2.60  1.90  2.60  0.90  3.10  2.40  3.10  1.40  3.10  2.40  3.10  1.40  2.60  1.90  2.60  0.90 ";
s[17]="  2.90  2.90  1.70  2.50  2.40  2.40  1.20  2.00  2.40  2.40  1.20  2.00  2.90  2.90  1.70  2.50  2.90  2.90  1.70  2.50  2.40  2.40  1.20  2.00 ";
s[18]="  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40  2.40  2.40  2.90  2.40  2.90  2.90  3.40  2.90  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40 ";
s[19]="  0.50  1.30  1.70  1.30  0.00  0.80  1.20  0.80  0.00  0.80  1.20  0.80  0.50  1.30  1.70  1.30  0.50  1.30  1.70  1.30  0.00  0.80  1.20  0.80 ";
s[20]="  3.60  3.50  3.60  2.50  2.70  2.60  2.70  1.60  2.10  2.00  2.10  1.00  3.50  3.40  3.50  2.40  3.60  3.50  3.60  2.50  2.70  2.60  2.70  1.60 ";
s[21]="  2.90  2.90  1.70  2.50  2.40  2.40  1.20  2.00  2.40  2.40  1.20  2.00  2.90  2.90  1.70  2.50  2.90  2.90  1.70  2.50  2.40  2.40  1.20  2.00 ";
s[22]="  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40  2.40  2.40  2.90  2.40  2.90  2.90  3.40  2.90  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40 ";
s[23]="  2.90  3.70  4.10  3.70  2.10  2.90  3.30  2.90  1.70  2.50  2.90  2.50  2.50  3.30  3.70  3.30  2.90  3.70  4.10  3.70  2.10  2.90  3.30  2.90 ";
s[24]="  3.00  2.90  3.00  1.90  2.50  2.40  2.50  1.40  2.50  2.40  2.50  1.40  3.00  2.90  3.00  1.90  3.00  2.90  3.00  1.90  2.50  2.40  2.50  1.40 ";
s[25]="  1.70  1.70  0.50  1.30  1.20  1.20  0.00  0.80  1.20  1.20  0.00  0.80  1.70  1.70  0.50  1.30  1.70  1.70  0.50  1.30  1.20  1.20  0.00  0.80 ";
s[26]="  3.50  3.50  4.00  3.50  2.40  2.40  2.90  2.40  2.00  2.00  2.50  2.00  3.40  3.40  3.90  3.40  3.50  3.50  4.00  3.50  2.40  2.40  2.90  2.40 ";
s[27]="  1.70  2.50  2.90  2.50  1.20  2.00  2.40  2.00  1.20  2.00  2.40  2.00  1.70  2.50  2.90  2.50  1.70  2.50  2.90  2.50  1.20  2.00  2.40  2.00 ";
s[28]="  3.60  3.50  3.60  2.50  2.50  2.40  2.50  1.40  2.10  2.00  2.10  1.00  3.50  3.40  3.50  2.40  3.60  3.50  3.60  2.50  2.50  2.40  2.50  1.40 ";
s[29]="  4.10  4.10  2.90  3.70  3.10  3.10  1.90  2.70  2.50  2.50  1.30  2.10  3.60  3.60  2.40  3.20  4.10  4.10  2.90  3.70  3.10  3.10  1.90  2.70 ";
s[30]="  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40  2.40  2.40  2.90  2.40  2.90  2.90  3.40  2.90  2.90  2.90  3.40  2.90  2.40  2.40  2.90  2.40 ";
s[31]="  2.90  3.70  4.10  3.70  1.90  2.70  3.10  2.70  1.30  2.10  2.50  2.10  2.40  3.20  3.60  3.20  2.90  3.70  4.10  3.70  1.90  2.70  3.10  2.70 ";
s[32]="  2.00  1.90  2.00  0.90  1.50  1.40  1.50  0.40  1.50  1.40  1.50  0.40  2.00  1.90  2.00  0.90  2.00  1.90  2.00  0.90  1.50  1.40  1.50  0.40 ";
s[33]="  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60  2.40  2.40  1.20  2.60  2.90  2.90  1.70  3.10  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60 ";
s[34]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[35]="  0.50  1.70  1.70  1.70  0.00  1.20  1.20  1.20  0.00  1.20  1.20  1.20  0.50  1.70  1.70  1.70  0.50  1.70  1.70  1.70  0.00  1.20  1.20  1.20 ";
s[36]="  4.20  3.50  4.20  2.50  3.30  2.60  3.30  1.60  2.70  2.00  2.70  1.00  4.10  3.40  4.10  2.40  4.20  3.50  4.20  2.50  3.30  2.60  3.30  1.60 ";
s[37]="  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60  2.40  2.40  1.20  2.60  2.90  2.90  1.70  3.10  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60 ";
s[38]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[39]="  2.90  4.10  4.10  4.10  2.10  3.30  3.30  3.30  1.70  2.90  2.90  2.90  2.50  3.70  3.70  3.70  2.90  4.10  4.10  4.10  2.10  3.30  3.30  3.30 ";
s[40]="  3.60  2.90  3.60  1.90  3.10  2.40  3.10  1.40  3.10  2.40  3.10  1.40  3.60  2.90  3.60  1.90  3.60  2.90  3.60  1.90  3.10  2.40  3.10  1.40 ";
s[41]="  1.70  1.70  0.50  1.90  1.20  1.20  0.00  1.40  1.20  1.20  0.00  1.40  1.70  1.70  0.50  1.90  1.70  1.70  0.50  1.90  1.20  1.20  0.00  1.40 ";
s[42]="  3.50  3.50  4.40  3.50  2.40  2.40  3.30  2.40  2.00  2.00  2.90  2.00  3.40  3.40  4.30  3.40  3.50  3.50  4.40  3.50  2.40  2.40  3.30  2.40 ";
s[43]="  1.70  2.90  2.90  2.90  1.20  2.40  2.40  2.40  1.20  2.40  2.40  2.40  1.70  2.90  2.90  2.90  1.70  2.90  2.90  2.90  1.20  2.40  2.40  2.40 ";
s[44]="  4.20  3.50  4.20  2.50  3.10  2.40  3.10  1.40  2.70  2.00  2.70  1.00  4.10  3.40  4.10  2.40  4.20  3.50  4.20  2.50  3.10  2.40  3.10  1.40 ";
s[45]="  4.10  4.10  2.90  4.30  3.10  3.10  1.90  3.30  2.50  2.50  1.30  2.70  3.60  3.60  2.40  3.80  4.10  4.10  2.90  4.30  3.10  3.10  1.90  3.30 ";
s[46]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[47]="  2.90  4.10  4.10  4.10  1.90  3.10  3.10  3.10  1.30  2.50  2.50  2.50  2.40  3.60  3.60  3.60  2.90  4.10  4.10  4.10  1.90  3.10  3.10  3.10 ";
s[48]="  2.60  1.90  2.60  0.90  2.10  1.40  2.10  0.40  2.10  1.40  2.10  0.40  2.60  1.90  2.60  0.90  2.60  1.90  2.60  0.90  2.10  1.40  2.10  0.40 ";
s[49]="  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50  2.90  2.90  1.70  3.50  3.40  3.40  2.20  4.00  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50 ";
s[50]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[51]="  1.00  2.80  2.20  2.80  0.50  2.30  1.70  2.30  0.50  2.30  1.70  2.30  1.00  2.80  2.20  2.80  1.00  2.80  2.20  2.80  0.50  2.30  1.70  2.30 ";
s[52]="  5.20  4.00  5.20  3.00  4.30  3.10  4.30  2.10  3.70  2.50  3.70  1.50  5.10  3.90  5.10  2.90  5.20  4.00  5.20  3.00  4.30  3.10  4.30  2.10 ";
s[53]="  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50  2.90  2.90  1.70  3.50  3.40  3.40  2.20  4.00  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50 ";
s[54]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[55]="  3.40  5.20  4.60  5.20  2.60  4.40  3.80  4.40  2.20  4.00  3.40  4.00  3.00  4.80  4.20  4.80  3.40  5.20  4.60  5.20  2.60  4.40  3.80  4.40 ";
s[56]="  4.60  3.40  4.60  2.40  4.10  2.90  4.10  1.90  4.10  2.90  4.10  1.90  4.60  3.40  4.60  2.40  4.60  3.40  4.60  2.40  4.10  2.90  4.10  1.90 ";
s[57]="  2.20  2.20  1.00  2.80  1.70  1.70  0.50  2.30  1.70  1.70  0.50  2.30  2.20  2.20  1.00  2.80  2.20  2.20  1.00  2.80  1.70  1.70  0.50  2.30 ";
s[58]="  4.00  4.00  5.20  4.00  2.90  2.90  4.10  2.90  2.50  2.50  3.70  2.50  3.90  3.90  5.10  3.90  4.00  4.00  5.20  4.00  2.90  2.90  4.10  2.90 ";
s[59]="  2.20  4.00  3.40  4.00  1.70  3.50  2.90  3.50  1.70  3.50  2.90  3.50  2.20  4.00  3.40  4.00  2.20  4.00  3.40  4.00  1.70  3.50  2.90  3.50 ";
s[60]="  5.20  4.00  5.20  3.00  4.10  2.90  4.10  1.90  3.70  2.50  3.70  1.50  5.10  3.90  5.10  2.90  5.20  4.00  5.20  3.00  4.10  2.90  4.10  1.90 ";
s[61]="  4.60  4.60  3.40  5.20  3.60  3.60  2.40  4.20  3.00  3.00  1.80  3.60  4.10  4.10  2.90  4.70  4.60  4.60  3.40  5.20  3.60  3.60  2.40  4.20 ";
s[62]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[63]="  3.40  5.20  4.60  5.20  2.40  4.20  3.60  4.20  1.80  3.60  3.00  3.60  2.90  4.70  4.10  4.70  3.40  5.20  4.60  5.20  2.40  4.20  3.60  4.20 ";
s[64]="  3.60  2.40  3.60  1.40  3.10  1.90  3.10  0.90  3.10  1.90  3.10  0.90  3.60  2.40  3.60  1.40  3.60  2.40  3.60  1.40  3.10  1.90  3.10  0.90 ";
s[65]="  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60  2.40  2.40  1.20  2.60  2.90  2.90  1.70  3.10  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60 ";
s[66]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[67]="  0.50  1.70  1.70  1.70  0.00  1.20  1.20  1.20  0.00  1.20  1.20  1.20  0.50  1.70  1.70  1.70  0.50  1.70  1.70  1.70  0.00  1.20  1.20  1.20 ";
s[68]="  4.20  3.50  4.20  2.50  3.30  2.60  3.30  1.60  2.70  2.00  2.70  1.00  4.10  3.40  4.10  2.40  4.20  3.50  4.20  2.50  3.30  2.60  3.30  1.60 ";
s[69]="  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60  2.40  2.40  1.20  2.60  2.90  2.90  1.70  3.10  2.90  2.90  1.70  3.10  2.40  2.40  1.20  2.60 ";
s[70]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[71]="  2.90  4.10  4.10  4.10  2.10  3.30  3.30  3.30  1.70  2.90  2.90  2.90  2.50  3.70  3.70  3.70  2.90  4.10  4.10  4.10  2.10  3.30  3.30  3.30 ";
s[72]="  3.60  2.90  3.60  1.90  3.10  2.40  3.10  1.40  3.10  2.40  3.10  1.40  3.60  2.90  3.60  1.90  3.60  2.90  3.60  1.90  3.10  2.40  3.10  1.40 ";
s[73]="  1.70  1.70  0.50  1.90  1.20  1.20  0.00  1.40  1.20  1.20  0.00  1.40  1.70  1.70  0.50  1.90  1.70  1.70  0.50  1.90  1.20  1.20  0.00  1.40 ";
s[74]="  3.50  3.50  4.40  3.50  2.40  2.40  3.30  2.40  2.00  2.00  2.90  2.00  3.40  3.40  4.30  3.40  3.50  3.50  4.40  3.50  2.40  2.40  3.30  2.40 ";
s[75]="  1.70  2.90  2.90  2.90  1.20  2.40  2.40  2.40  1.20  2.40  2.40  2.40  1.70  2.90  2.90  2.90  1.70  2.90  2.90  2.90  1.20  2.40  2.40  2.40 ";
s[76]="  4.20  3.50  4.20  2.50  3.10  2.40  3.10  1.40  2.70  2.00  2.70  1.00  4.10  3.40  4.10  2.40  4.20  3.50  4.20  2.50  3.10  2.40  3.10  1.40 ";
s[77]="  4.10  4.10  2.90  4.30  3.10  3.10  1.90  3.30  2.50  2.50  1.30  2.70  3.60  3.60  2.40  3.80  4.10  4.10  2.90  4.30  3.10  3.10  1.90  3.30 ";
s[78]="  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40  2.40  2.40  3.30  2.40  2.90  2.90  3.80  2.90  2.90  2.90  3.80  2.90  2.40  2.40  3.30  2.40 ";
s[79]="  2.90  4.10  4.10  4.10  1.90  3.10  3.10  3.10  1.30  2.50  2.50  2.50  2.40  3.60  3.60  3.60  2.90  4.10  4.10  4.10  1.90  3.10  3.10  3.10 ";
s[80]="  2.60  1.90  2.60  0.90  2.10  1.40  2.10  0.40  2.10  1.40  2.10  0.40  2.60  1.90  2.60  0.90  2.60  1.90  2.60  0.90  2.10  1.40  2.10  0.40 ";
s[81]="  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50  2.90  2.90  1.70  3.50  3.40  3.40  2.20  4.00  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50 ";
s[82]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[83]="  1.00  2.80  2.20  2.80  0.50  2.30  1.70  2.30  0.50  2.30  1.70  2.30  1.00  2.80  2.20  2.80  1.00  2.80  2.20  2.80  0.50  2.30  1.70  2.30 ";
s[84]="  5.20  4.00  5.20  3.00  4.30  3.10  4.30  2.10  3.70  2.50  3.70  1.50  5.10  3.90  5.10  2.90  5.20  4.00  5.20  3.00  4.30  3.10  4.30  2.10 ";
s[85]="  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50  2.90  2.90  1.70  3.50  3.40  3.40  2.20  4.00  3.40  3.40  2.20  4.00  2.90  2.90  1.70  3.50 ";
s[86]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[87]="  3.40  5.20  4.60  5.20  2.60  4.40  3.80  4.40  2.20  4.00  3.40  4.00  3.00  4.80  4.20  4.80  3.40  5.20  4.60  5.20  2.60  4.40  3.80  4.40 ";
s[88]="  4.60  3.40  4.60  2.40  4.10  2.90  4.10  1.90  4.10  2.90  4.10  1.90  4.60  3.40  4.60  2.40  4.60  3.40  4.60  2.40  4.10  2.90  4.10  1.90 ";
s[89]="  2.20  2.20  1.00  2.80  1.70  1.70  0.50  2.30  1.70  1.70  0.50  2.30  2.20  2.20  1.00  2.80  2.20  2.20  1.00  2.80  1.70  1.70  0.50  2.30 ";
s[90]="  4.00  4.00  5.20  4.00  2.90  2.90  4.10  2.90  2.50  2.50  3.70  2.50  3.90  3.90  5.10  3.90  4.00  4.00  5.20  4.00  2.90  2.90  4.10  2.90 ";
s[91]="  2.20  4.00  3.40  4.00  1.70  3.50  2.90  3.50  1.70  3.50  2.90  3.50  2.20  4.00  3.40  4.00  2.20  4.00  3.40  4.00  1.70  3.50  2.90  3.50 ";
s[92]="  5.20  4.00  5.20  3.00  4.10  2.90  4.10  1.90  3.70  2.50  3.70  1.50  5.10  3.90  5.10  2.90  5.20  4.00  5.20  3.00  4.10  2.90  4.10  1.90 ";
s[93]="  4.60  4.60  3.40  5.20  3.60  3.60  2.40  4.20  3.00  3.00  1.80  3.60  4.10  4.10  2.90  4.70  4.60  4.60  3.40  5.20  3.60  3.60  2.40  4.20 ";
s[94]="  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90  2.90  2.90  4.10  2.90  3.40  3.40  4.60  3.40  3.40  3.40  4.60  3.40  2.90  2.90  4.10  2.90 ";
s[95]="  3.40  5.20  4.60  5.20  2.40  4.20  3.60  4.20  1.80  3.60  3.00  3.60  2.90  4.70  4.10  4.70  3.40  5.20  4.60  5.20  2.40  4.20  3.60  4.20 ";
s[96]="  3.60  2.40  3.60  1.40  3.10  1.90  3.10  0.90  3.10  1.90  3.10  0.90  3.60  2.40  3.60  1.40  3.60  2.40  3.60  1.40  3.10  1.90  3.10  0.90 ";

            string line_string;
            for (int a = 0; a < 6; a++)
            {
                for (int d = 0; d < 4; d++)
                {
                    for (int m = 0; m < 4; m++)
                    {
                        p++;
                        line_string = s[p];
                        for (int b = 0; b < 6; b++)
                        {
                            string sub_line = line_string.Substring(24 * b + 2, 22);
                            for (int n = 0; n < 4; n++)
                            {
                                string interior1x2data_string = sub_line.Substring(6 * n, 4);
                                interior_1x2_data[a, b, d, m, n] = Convert.ToDouble(interior1x2data_string);

                            }
                        }
                    }
                }
            }
        }

        //assume base i and j form a base pair;set a matrix decrease complexity
        private static void setGMatrix()
        {
            G_matrix = new int[stemLoop.Length, stemLoop.Length];
            GBI_Next_Pair = new string[stemLoop.Length, stemLoop.Length];
            Secondary_Structure = new int[stemLoop.Length];
            for (int k = 0; k < 4; k++)
            {
                for (int i = 0, j = k; j < stemLoop.Length; i++, j++)
                {
                    G_matrix[i, j] = 999;
                }
            }
            for (int k = 4; k < stemLoop.Length; k++)
            {
                for (int i = 0, j = k; j < stemLoop.Length; i++, j++)
                {
                    G_matrix[i, j] = G(i, j);
                }
            }

        }

        private static int min(int a, int b, int c)
        {
            int minimum;
            if (a <= b)
            {
                if (a <= c)
                    minimum = a;
                else
                    minimum = c;
            }
            else if (b >= c)
                minimum = c;
            else
                minimum = b;
            return minimum;
        }
        private static int minObject(int a, int b, int c)
        {
            if (a <= b)
            {
                if (a <= c)
                    return 0;
                else
                    return 2;
            }
            else if (b >= c)
                return 2;
            else
                return 1;
        }  //this function is for traceback



        private static int G(int i, int j)
        {
            if (j - i >= 4)
            {
                return min(EnergyH(i, j), EnergyS(i, j) + G_matrix[i + 1, j - 1], GBI(i, j));
            }
            else
            {
                return G_matrix[i, j];
            }
        }                           //a recursion function for finding minimun energy，the energy is now an integer
        private static int GBI(int i, int j)
        {
            int output = 9999;
            int max_size = j - i - 1 - 7;//to get maxsize the upper need to be a hairpin loop with size 3 and their must be at least 2 base pairs between loops
            if (j - i - 1 - 7 >= maxIsize)
            {
                for (int k = i + 1; k <= i + maxIsize + 1; k++)
                {
                    for (int l = j - 1; l >= k + j - i - 2 - maxIsize; l--)
                    {
                        if (((stemloop_array[k + 1] + stemloop_array[l - 1]) == 3) || ((stemloop_array[k + 1] + stemloop_array[l - 1]) == 5))
                        {

                            if (((stemloop_array[k] + stemloop_array[l]) == 3) || ((stemloop_array[k] + stemloop_array[l]) == 5))
                            {
                                int energy = EnergyBI(i, j, k, l) + G_matrix[k, l];
                                if (output >= energy)
                                {
                                    output = energy;
                                    GBI_Next_Pair[i, j] = k.ToString() + l.ToString();
                                }
                            }


                        }

                    }
                }

            }

            else if (max_size > 0)
            {

                for (int k = i + 1; k <= i + max_size + 1; k++)
                {
                    for (int l = j - 1; l >= k + j - i - 2 - max_size; l--)
                    {
                        if (((stemloop_array[k + 1] + stemloop_array[l - 1]) == 3) || ((stemloop_array[k + 1] + stemloop_array[l - 1]) == 5))
                        {

                            if (((stemloop_array[k] + stemloop_array[l]) == 3) || ((stemloop_array[k] + stemloop_array[l]) == 5))
                            {
                                int energy = EnergyBI(i, j, k, l) + G_matrix[k, l];
                                if (output >= energy)
                                {
                                    output = energy;
                                    GBI_Next_Pair[i, j] = k.ToString() + l.ToString();
                                }
                            }
                        }


                    }
                }

            }

            return output;
        }                       //this function is for finding the best 2-loop based on minimum energy rules
        private static int EnergyBI(int i, int j, int k, int l)
        {
            int energy = 0;
            int leftsize = k - i - 1;
            int rightsize = j - l - 1;
            int loopsize = leftsize + rightsize;
            if (loopsize <= 0)
            {
                energy = 9999;
            }
            else
            {
                if (leftsize == 0 || rightsize == 0)
                {
                    energy += loopsizdedata[1, loopsize - 1];
                    if (loopsize == 1)
                    {
                        int a, b, c, d;
                        a = stemloop_array[i];
                        b = stemloop_array[j];
                        c = stemloop_array[k];
                        d = stemloop_array[l];
                        energy += stackdata[a, b, c, d];
                    }
                }
                else
                {
                    if (loopsize > 4)
                    {
                        energy += loopsizdedata[2, loopsize - 1];
                        int a, b, c, d;
                        a = stemloop_array[i];
                        b = stemloop_array[j];
                        c = stemloop_array[i + 1];
                        d = stemloop_array[j - 1];
                        energy += tstack_I_data[a, b, c, d];

                        a = stemloop_array[l];
                        b = stemloop_array[k];
                        c = stemloop_array[l + 1];
                        d = stemloop_array[k - 1];
                        energy += tstack_I_data[a, b, c, d];
                    }
                    else
                    {
                        if (leftsize == 1 && rightsize == 1)
                        {
                            energy += 8;
                        }
                        if (leftsize == 2 && rightsize == 2)
                        {
                            int a = 0, b = 0, m, n;
                            if (stemloop_array[i] == 0 && stemloop_array[j] == 3)
                            {
                                a = 0;
                            }
                            if (stemloop_array[i] == 1 && stemloop_array[j] == 2)
                            {
                                a = 1;
                            }
                            if (stemloop_array[i] == 2 && stemloop_array[j] == 1)
                            {
                                a = 2;
                            }
                            if (stemloop_array[i] == 3 && stemloop_array[j] == 0)
                            {
                                a = 3;
                            }
                            if (stemloop_array[i] == 2 && stemloop_array[j] == 3)
                            {
                                a = 4;
                            }
                            if (stemloop_array[i] == 3 && stemloop_array[j] == 2)
                            {
                                a = 5;
                            }

                            if (stemloop_array[k] == 0 && stemloop_array[l] == 3)
                            {
                                b = 0;
                            }
                            if (stemloop_array[k] == 1 && stemloop_array[l] == 2)
                            {
                                b = 1;
                            }
                            if (stemloop_array[k] == 2 && stemloop_array[l] == 1)
                            {
                                b = 2;
                            }
                            if (stemloop_array[k] == 3 && stemloop_array[l] == 0)
                            {
                                b = 3;
                            }
                            if (stemloop_array[k] == 2 && stemloop_array[l] == 3)
                            {
                                b = 4;
                            }
                            if (stemloop_array[k] == 3 && stemloop_array[l] == 2)
                            {
                                b = 5;
                            }
                            m = stemloop_array[i + 1] * 4 + stemloop_array[j - 1];
                            n = stemloop_array[k - 1] * 4 + stemloop_array[l + 1];
                            double increase = interior_2x2_data[a, b, m, n] * 10;
                            energy += (int)increase;
                        }
                        if (leftsize == 1 && rightsize == 2)
                        {
                            int a = 0, b = 0, d, m, n;
                            if (stemloop_array[i] == 0 && stemloop_array[j] == 3)
                            {
                                a = 0;
                            }
                            if (stemloop_array[i] == 1 && stemloop_array[j] == 2)
                            {
                                a = 1;
                            }
                            if (stemloop_array[i] == 2 && stemloop_array[j] == 1)
                            {
                                a = 2;
                            }
                            if (stemloop_array[i] == 3 && stemloop_array[j] == 0)
                            {
                                a = 3;
                            }
                            if (stemloop_array[i] == 2 && stemloop_array[j] == 3)
                            {
                                a = 4;
                            }
                            if (stemloop_array[i] == 3 && stemloop_array[j] == 2)
                            {
                                a = 5;
                            }

                            if (stemloop_array[k] == 0 && stemloop_array[l] == 3)
                            {
                                b = 0;
                            }
                            if (stemloop_array[k] == 1 && stemloop_array[l] == 2)
                            {
                                b = 1;
                            }
                            if (stemloop_array[k] == 2 && stemloop_array[l] == 1)
                            {
                                b = 2;
                            }
                            if (stemloop_array[k] == 3 && stemloop_array[l] == 0)
                            {
                                b = 3;
                            }
                            if (stemloop_array[k] == 2 && stemloop_array[l] == 3)
                            {
                                b = 4;
                            }
                            if (stemloop_array[k] == 3 && stemloop_array[l] == 2)
                            {
                                b = 5;
                            }
                            d = stemloop_array[l + 1];
                            m = stemloop_array[i + 1];
                            n = stemloop_array[j - 1];
                            double increase = interior_1x2_data[a, b, d, m, n] * 10;
                            energy += (int)increase;
                        }
                        if (leftsize == 2 && rightsize == 1)
                        {
                            int a = 0, b = 0, d, m, n;
                            if (stemloop_array[l] == 0 && stemloop_array[k] == 3)
                            {
                                a = 0;
                            }
                            if (stemloop_array[l] == 1 && stemloop_array[k] == 2)
                            {
                                a = 1;
                            }
                            if (stemloop_array[l] == 2 && stemloop_array[k] == 1)
                            {
                                a = 2;
                            }
                            if (stemloop_array[l] == 3 && stemloop_array[k] == 0)
                            {
                                a = 3;
                            }
                            if (stemloop_array[l] == 2 && stemloop_array[k] == 3)
                            {
                                a = 4;
                            }
                            if (stemloop_array[l] == 3 && stemloop_array[k] == 2)
                            {
                                a = 5;
                            }

                            if (stemloop_array[j] == 0 && stemloop_array[i] == 3)
                            {
                                b = 0;
                            }
                            if (stemloop_array[j] == 1 && stemloop_array[i] == 2)
                            {
                                b = 1;
                            }
                            if (stemloop_array[j] == 2 && stemloop_array[i] == 1)
                            {
                                b = 2;
                            }
                            if (stemloop_array[j] == 3 && stemloop_array[i] == 0)
                            {
                                b = 3;
                            }
                            if (stemloop_array[j] == 2 && stemloop_array[i] == 3)
                            {
                                b = 4;
                            }
                            if (stemloop_array[j] == 3 && stemloop_array[i] == 2)
                            {
                                b = 5;
                            }
                            d = stemloop_array[i + 1];
                            m = stemloop_array[j - 1];
                            n = stemloop_array[k - 1];
                            double increase = interior_1x2_data[a, b, d, m, n] * 10;
                            energy += (int)increase;
                        }
                    }
                }

            }
            return energy;
        }    //this function is to calculate the energy of 2-loop
        private static int EnergyH(int i, int j)
        {
            int loopsize = j - i - 1;
            int energy = 0;
            if (loopsize >= 3 && loopsize < maxHsize)
            {
                energy += loopsizdedata[0, loopsize - 1];
                if (loopsize == 3)
                {
                    string triloop_string = "";
                    for (int m = i; m <= j; m++)
                    {
                        triloop_string += stemLoopchar_array[m].ToString();
                    }
                    for (int n = 0; n < 16; n++)
                    {
                        if (triloop_string.CompareTo(triloop_data[n].Substring(0, 5)) == 0)
                        {
                            energy += Convert.ToInt32(triloop_data[n].Substring(6, 3));
                        }
                    }
                }
                if (loopsize == 4)
                {
                    string tetraloop_string = "";
                    for (int m = i; m <= j; m++)
                    {
                        tetraloop_string += stemLoopchar_array[m].ToString();
                    }
                    if (stemLoopchar_array[i] == 'A' && stemLoopchar_array[j] == 'T')
                    {
                        for (int n = 0; n < 13; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }
                    if (stemLoopchar_array[i] == 'C' && stemLoopchar_array[j] == 'G')
                    {
                        for (int n = 13; n < 26; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }
                    if (stemLoopchar_array[i] == 'G' && stemLoopchar_array[j] == 'C')
                    {
                        for (int n = 26; n < 39; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }
                    if (stemLoopchar_array[i] == 'T' && stemLoopchar_array[j] == 'A')
                    {
                        for (int n = 39; n < 52; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }
                    if (stemLoopchar_array[i] == 'G' && stemLoopchar_array[j] == 'T')
                    {
                        for (int n = 52; n < 65; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }
                    if (stemLoopchar_array[i] == 'T' && stemLoopchar_array[j] == 'G')
                    {
                        for (int n = 65; n < 78; n++)
                        {
                            if (tetraloop_string.CompareTo(tetraloop_data[n].Substring(0, 6)) == 0)
                            {
                                energy += Convert.ToInt32(tetraloop_data[n].Substring(7, 3));
                            }
                        }
                    }

                }
                if (loopsize > 3)
                {
                    int a, b, c, d;
                    a = stemloop_array[i];
                    b = stemloop_array[j];
                    c = stemloop_array[i + 1];
                    d = stemloop_array[j - 1];
                    energy += tstack_H_data[a, b, c, d];
                }
            }
            else
            {
                energy += 9999;
            }

            return energy;


        }                   //to calculate the energy of hairpinloop(1-loop)
        private static int EnergyS(int i, int j)
        {
            int a, b, c, d;
            if (j - i >= 6)
            {
                a = stemloop_array[i];
                b = stemloop_array[j];
                c = stemloop_array[i + 1];
                d = stemloop_array[j - 1];
                return stackdata[a, b, c, d];
            }
            else
            {
                return 9999;
            }

        }                   //to calculate the energy of stack

        private static string Traceback_string()
        {
            Structure_Traceback(0, stemLoop.Length - 1);
            string structure_string = "";
            for (int i = 0; i < stemLoop.Length; i++)
            {
                structure_string += Secondary_Structure[i].ToString();
            }
            return structure_string;
        }                   //return a string which consists of 1 and 0; 1 means form pair with other base while 0 means a single base
        private static void Structure_Traceback(int i, int j)
        {
            if (j - i >= 4)
            {
                int minimal_one = minObject(EnergyH(i, j), EnergyS(i, j) + G_matrix[i + 1, j - 1], GBI(i, j));


                if (minimal_one == 0)
                {
                    Secondary_Structure[i] = 1;
                    Secondary_Structure[j] = 1;
                }

                if (minimal_one == 1)
                {
                    Secondary_Structure[i] = 1;
                    Secondary_Structure[j] = 1;
                    Structure_Traceback(i + 1, j - 1);
                }
                if (minimal_one == 2)
                {
                    Secondary_Structure[i] = 1;
                    Secondary_Structure[j] = 1;
                    int k = 0, l = 0;
                    if (GBI_Next_Pair[i, j].Length == 2)
                    {
                        k = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(0, 1));
                        l = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(1, 1));
                    }
                    if (GBI_Next_Pair[i, j].Length == 3)
                    {
                        k = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(0, 1));
                        l = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(1, 2));
                    }
                    if (GBI_Next_Pair[i, j].Length == 4)
                    {
                        k = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(0, 2));
                        l = Convert.ToInt32(GBI_Next_Pair[i, j].Substring(2, 2));
                    }
                    Structure_Traceback(k, l);
                }
            }
        }           //a recurtion trace back function which aims to find the secondary structure;here the function writes 1 0 in to an array
        private static string Fullstructure_string()
        {
            string fullstructure_string = "";
            for (int i = 0; i < atail.Length; i++)
            {
                fullstructure_string += "0";
            }
            fullstructure_string += Structure;
            for (int i = 0; i < ttail.Length + spacer.Length ; i++)
            {
                fullstructure_string += "0";
            }
            return fullstructure_string;
        }

        private static double FreeEnergy()
        {
            double energy;
            setStemLoopArray();
            setGMatrix();
            energy = G_matrix[0, stemLoop.Length - 1];
            energy = energy / 10;
            return energy;
        }
        private static double ntCal()
        {
            double tscore;
            char[] ttailArray = ttail.ToCharArray();
            double[] ttailScore = new double[ttail.Length];
            ttailScore[0] = 0.9;
            tscore = ttailScore[0];
            if (ttail.Length < 15)
            {
                for (int i = 1; i < ttail.Length; i++)
                {
                    if (ttailArray[i] == 'T')
                    {
                        ttailScore[i] = 0.9 * ttailScore[i - 1];
                        tscore += ttailScore[i];
                    }
                    else
                    {
                        ttailScore[i] = 0.6 * ttailScore[i - 1];
                    }
                }
            }
            else
            {
                for (int i = 1; i < 15; i++)
                {
                    if (ttailArray[i] == 'T')
                    {
                        ttailScore[i] = 0.9 * ttailScore[i - 1];
                        tscore += ttailScore[i];
                    }
                    else
                    {
                        ttailScore[i] = 0.6 * ttailScore[i - 1];
                    }
                }
            }
            return tscore;
        }



            public static double efficiency()
        {
            double efficiency = 0;
            if (dscore <= -60 )
            {

                efficiency = 0;
            }
            if ((dscore > -60) && (dscore <=0))
            {
                efficiency = 30 + 0.5 * dscore;
            }
            if ((dscore > 0) && (dscore <= 10))
            {
                efficiency = 1.5 * dscore + 30;
            }
            if ((dscore > 10) && (dscore <= 25))
            {
                efficiency = 0.57143 * dscore + 39.2857;
            }
            if ((dscore >25) && (dscore <=27))
            {
                efficiency = 12.5*dscore-259.5;
            }
            if ((dscore >27) && (dscore <=29 ))
            {
                efficiency = 4 * dscore - 26;
            }
            if ((dscore >29) && (dscore <=32.5))
            {
                efficiency = 2 * dscore + 32;
            }
            if ((dscore >32.5) && (dscore <=40))
            {
                efficiency = 0.4 * dscore + 84;
            }

            if (dscore >40)
            {
                efficiency = 100;
            }
            return efficiency;
        }

        public static double Score(string atail_string,string stemloop_string,string spacer_string, string ttail_string)
        {
            atail = atail_string;
            stemLoop = stemloop_string;
            spacer = spacer_string;
            ttail = ttail_string;
            freeEnergy = FreeEnergy();
            nt = ntCal();
            dscore = nt * 18.16 - freeEnergy / stemLoop.Length * 96.59 - 116.87;
            terminatorefficiency = efficiency();
            Structure = Traceback_string();
            Full_Structure = Fullstructure_string();
            return dscore;
        }      // the function for users

    }
}